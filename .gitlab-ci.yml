# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
stages:
- environments
- test
".environment":
  stage: environments
  variables:
    TF_ROOT: terraform
    TF_CLI_ARGS_plan: "-var-file=../vars/$variables_file.tfvars"
  trigger:
    include: ".gitlab-ci/.first-layer.gitlab-ci.yml"
    strategy: depend
    forward:
      yaml_variables: true
      pipeline_variables: true
review:
  extends: ".environment"
  variables:
    environment: review/$CI_COMMIT_REF_SLUG
    TF_STATE_NAME: "$CI_COMMIT_REF_SLUG"
    variables_file: review
    TF_VAR_aws_resources_name: "$CI_COMMIT_REF_SLUG"
  rules:
  - if: "$CI_COMMIT_BRANCH && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH"
integration:
  extends: ".environment"
  variables:
    environment: integration
    TF_STATE_NAME: "$environment"
    variables_file: "$environment"
  rules:
  - if: "$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH"
staging:
  extends: ".environment"
  variables:
    environment: staging
    TF_STATE_NAME: staging
    variables_file: "$environment"
  rules:
  - if: "$CI_COMMIT_TAG"
